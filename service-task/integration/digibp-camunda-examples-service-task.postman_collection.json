{
	"info": {
		"_postman_id": "8251ba37-fa1c-4079-b967-f7bbe1ce9125",
		"name": "digibp-camunda-examples-service-task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "localhost Echo POST",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5e7c074a-3199-44c6-84d2-777aba98047e",
						"type": "text/javascript",
						"exec": [
							"// Connector-START • Camunda HTTP Connector JavaScript emulation:",
							"eval(pm.environment.get(\"camunda\"));",
							"// Connector-END",
							"",
							"// Test-Data-START • Initialise process variables, and (optionally) business key and/or process id:",
							"processVariableA = \"Data A\";",
							"processVariableB = \"Data B\";",
							"execution.setProcessBusinessKey(\"case-001\");",
							"// Test-Data-END",
							"",
							"// Service-Task-Input-START • Camunda HTTP Connector Input Parameter payload Script:",
							"out = JSON.stringify({",
							"    \"variableA\": processVariableA,",
							"    \"variableB\": processVariableB,",
							"    \"businessKey\": execution.getProcessBusinessKey()",
							"});",
							"// Service-Task-Input-END",
							"",
							"// Body-START • Postman Body {{payload}}:",
							"payload.set(out);",
							"// Body-END "
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f7a19e81-b6be-4630-b981-1ef444485dd8",
						"type": "text/javascript",
						"exec": [
							"// Connector-START • Camunda HTTP Connector JavaScript emulation:",
							"eval(pm.environment.get(\"camunda\"));",
							"// Connector-END",
							"",
							"// Service-Task-Output-START • Camunda HTTP Connector Output Parameter processVariableA Script:",
							"object = JSON.parse(response);",
							"processVariableA = object.variableA;",
							"// Service-Task-Output-END",
							"",
							"// Service-Task-Output-START • Camunda HTTP Connector Output Parameter processVariableB Script:",
							"object = JSON.parse(response);",
							"processVariableB = object.variableB;",
							"// Service-Task-Output-END",
							"",
							"// Test-START • Postman Test:",
							"pm.test(\"Test processVariableA: \" + processVariableA, function() {",
							"    pm.expect(processVariableA).to.include(\"ECHO\");",
							"});",
							"pm.test(\"Test processVariableB: \" + processVariableB, function() {",
							"    pm.expect(processVariableB).to.include(\"ECHO\");",
							"});",
							"pm.test(\"Test businessKey: \" + JSON.parse(response).businessKey, function() {",
							"    pm.expect(JSON.parse(response).businessKey).to.include(\"case-001\");",
							"});",
							"pm.test(\"Test statusCode: \" + statusCode, function() {",
							"    pm.expect(statusCode).to.be.ok;",
							"});",
							"// Test-END"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{payload}}"
				},
				"url": {
					"raw": "http://localhost:8080/echo/v1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"echo",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "putsreq.com Echo Secure POST",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "88079e37-90f2-42ba-9430-a4b397335ba5",
						"type": "text/javascript",
						"exec": [
							"// Connector-START • Camunda HTTP Connector JavaScript emulation:",
							"eval(pm.environment.get(\"camunda\"));",
							"// Connector-END",
							"",
							"// Test-Data-START • Initialise process variables, and (optionally) business key and/or process id:",
							"processVariableA = \"Data A\";",
							"processVariableB = \"Data B\";",
							"execution.setProcessBusinessKey(\"case-001\");",
							"// Test-Data-END",
							"",
							"// Service-Task-Input-START • Camunda HTTP Connector Input Parameter payload Script:",
							"out = JSON.stringify({",
							"    \"variableA\": processVariableA,",
							"    \"variableB\": processVariableB,",
							"    \"businessKey\": execution.getProcessBusinessKey()",
							"});",
							"// Service-Task-Input-END",
							"",
							"// Body-START • Postman Body {{payload}}:",
							"payload.set(out);",
							"// Body-END "
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8c020548-0a0a-48a5-ae64-46a3a3dc1375",
						"type": "text/javascript",
						"exec": [
							"// Connector-START • Camunda HTTP Connector JavaScript emulation:",
							"eval(pm.environment.get(\"camunda\"));",
							"// Connector-END",
							"",
							"// Service-Task-Output-START • Camunda HTTP Connector Output Parameter processVariableA Script:",
							"object = JSON.parse(response);",
							"processVariableA = object.variableA;",
							"// Service-Task-Output-END",
							"",
							"// Service-Task-Output-START • Camunda HTTP Connector Output Parameter processVariableB Script:",
							"object = JSON.parse(response);",
							"processVariableB = object.variableB;",
							"// Service-Task-Output-END",
							"",
							"// Test-START • Postman Test:",
							"pm.test(\"Test processVariableA: \" + processVariableA, function() {",
							"    pm.expect(processVariableA).to.include(\"ECHO\");",
							"});",
							"pm.test(\"Test processVariableB: \" + processVariableB, function() {",
							"    pm.expect(processVariableB).to.include(\"ECHO\");",
							"});",
							"pm.test(\"Test businessKey: \" + JSON.parse(response).businessKey, function() {",
							"    pm.expect(JSON.parse(response).businessKey).to.include(\"case-001\");",
							"});",
							"pm.test(\"Test statusCode: \" + statusCode, function() {",
							"    pm.expect(statusCode).to.be.ok;",
							"});",
							"// Test-END"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "secret",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{payload}}"
				},
				"url": {
					"raw": "https://putsreq.com/RwkouWdakBRRUR00bdCj",
					"protocol": "https",
					"host": [
						"putsreq",
						"com"
					],
					"path": [
						"RwkouWdakBRRUR00bdCj"
					]
				}
			},
			"response": []
		}
	]
}